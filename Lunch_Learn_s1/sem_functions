# ================================================================================
# Example function that wrap example API endpoints in bash callable functions
# See https://semantex.ai/apis/ for a details on all the APIs and their interface.
#
# REQUIRES: 
#   - curl (https://curl.se/) 
#   - jq (https://stedolan.github.io/jq/)
#   - bash/zsh shell 
#
# AUTHOR: Atif Khan
# DATE:   Oct, 2022
#
# USAGE: source sem_functions
#   - e.g. $ sem_lang_detect "This text is written in English."
# ================================================================================

API_KEY=${API_KEY:=889543c8-8e1a0583-d895af11-183205330bf}
BASE_URL=${BASE_URL:=https://w1waoh1clk.execute-api.us-east-1.amazonaws.com/semantex-qa}
H_API="X-API-KEY: $API_KEY"
H_CT_JSON="Content-Type: application/json"
H_CT_PDF="Content-Type: application/pdf"

# Detects the language for a given text input
function sem_lang_detect() {
    local text=$1
    
    local payload=$(jq -nr --arg t "$text" '{"text":$t}')        

    curl -s -X POST -H $H_API -H $H_CT_JSON "$BASE_URL/text/nlp/langdetect" -d "$payload" 
}

# Detects the sentiment for a given text input
function sem_sentiment() {
    local text=$1
    
    local lang="en"
    if [ -n "$2" ]; then lang1=$2; fi

    local payload=$(jq -nr --arg t "$text" --arg l "$lang" '{"text":$t, "lang":$l}')        

    curl -s -X POST -H $H_API -H $H_CT_JSON "$BASE_URL/text/enrichment/sentiment" -d "$payload" 
}


# Detects the various named-entities from a given text input
function sem_entities() {
    local text=$1
    
    local lang="en"
    if [ -n "$2" ]; then lang1=$2; fi

    local payload=$(jq -nr --arg t "$text" --arg l "$lang" '{"text":$t, "lang":$l}')        

    curl -s -X POST -H $H_API -H $H_CT_JSON "$BASE_URL/text/nlp/ner" -d "$payload" 
}


# Spellcheck on a text input.
function sem_spellcheck() {
    local text=$1
    
    local lang="en"
    if [ -n "$2" ]; then lang1=$2; fi

    local payload=$(jq -nr --arg t "$text" --arg l "$lang" '{"text":$t, "lang":$l}')        

    curl -s -X POST -H $H_API -H $H_CT_JSON "$BASE_URL/text/nlp/spellcheck" -d "$payload" 
}

# Parses a PDF file.
function sem_parse_pdf() {
    local file=$1

    if ! [[ -f "$file" ]]; then
        echo "$file does not exist."
    fi

    curl -s -X POST -H $H_API -H $H_CT_PDF "$BASE_URL/docs/parsers/pdf" --upload-file "$file" 
}

# Computes similarity of two text items.
# input:
#   $1: text item 1
#   $2: text item 2
#   $3: OPTIONAL(en): language code for text item 1
#   $4: OPTIONAL(en): language code for text item 2
#   $5: OPTIONAL("sem.ssm"): The similarity algorithm identifier used for comparison.
function sem_similarity() {

    local text1=$1
    local text2=$2

    local lang1="en"
    if [ -n "$3" ]; then lang1=$3; fi

    local lang2="en"
    if [ -n "$4" ]; then lang2=$4; fi

    local algo="sem.ssm"
    if [ -n "$5" ]; then algo=$5; fi

    local payload=$(jq -nr --arg t1 "$text1" --arg l1 "$lang1" --arg t2 "$text2" --arg l2 "$lang2" --arg a "$algo" '{"text1":$t1, "text2":$t2, "lang1":$l1, "lang2":$l2, "algo":$a}')        

    curl -s -X POST -H $H_API -H $H_CT_JSON "$BASE_URL/text/similarity" -d "$payload" 
    
}

# Validates the requirements
function validate() {

    if ! [ -x "$(command -v jq)" ]; then
        echo 'Error: Missing dependency [jq]' >&2
        return 1
    fi

    if ! [ -x "$(command -v curl)" ]; then
        echo 'Error: Missing dependency [curl]' >&2
        return 1
    fi


}
validate
